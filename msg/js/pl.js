// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.pl');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Dodaj komentarz";
Blockly.Msg.ARRAY_GET_TITLE = "";  // untranslated
Blockly.Msg.AUTH = "Proszę autoryzować ten program, aby można było zapisać swoją pracę i umożliwić dzielenie się nią przez ciebie.";
Blockly.Msg.CHANGE_VALUE_TITLE = "Zmień wartość:";
Blockly.Msg.CHAT = "Rozmawiaj z swoim współpracownikiem, pisząc w tym polu!";
Blockly.Msg.COLLAPSE_ALL = "Zwiń bloki";
Blockly.Msg.COLLAPSE_BLOCK = "Zwiń blok";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "kolor 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "kolor 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_RATIO = "proporcja";
Blockly.Msg.COLOUR_BLEND_TITLE = "mieszanka";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Miesza dwa kolory w danej proporcji (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Wybierz kolor z palety.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";  // untranslated
Blockly.Msg.COLOUR_RANDOM_TITLE = "losowy kolor";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Wybierz kolor w sposób losowy.";
Blockly.Msg.COLOUR_RGB_BLUE = "niebieski";
Blockly.Msg.COLOUR_RGB_GREEN = "zielony";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_RED = "czerwony";
Blockly.Msg.COLOUR_RGB_TITLE = "kolor z";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Połącz czerwony, zielony i niebieski w odpowiednich proporcjach, tak aby powstał nowy kolor. Zawartość każdego z nich określa liczba z przedziału od 0 do 100.";
Blockly.Msg.COMMENT_MUTATOR_COMMENTADD_TITLE = "Add";  // untranslated
Blockly.Msg.COMMENT_TITLE = "comment";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#Loop_Termination_Blocks";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "wyjść z pętli";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "Przejdź do kolejnej iteracji pętli";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Wyjść z zawierającej pętli.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Pomiń resztę pętli i kontynuuj w kolejnej iteracji.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Ostrzeżenie: Ten blok może być użyty tylko w pętli.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#for_each";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST = "na liście";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST_TAIL = "";
Blockly.Msg.CONTROLS_FOREACH_INPUT_ITEM = "dla każdego elementu";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#count_with";
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO_BY = "od %1 do %2 co %3 (wartość kroku)";
Blockly.Msg.CONTROLS_FOR_INPUT_WITH = "liczyć z";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Czy zmienna %1 przyjmuje wartości od numeru startowego do numeru końcowego, licząc przez określony interwał, i wykonuje  określone bloki.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Dodaj warunek do bloku „jeśli”.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Dodaj ostatni warunek do bloku „jeśli”, gdy żaden wcześniejszy nie był spełniony.";
Blockly.Msg.CONTROLS_IF_HELPURL = "http://code.google.com/p/blockly/wiki/If_Then";
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Dodaj, usuń lub zmień kolejność bloków, żeby zmodyfikować blok „jeśli”.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "w przeciwnym razie";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "w przeciwnym razie jeśli";
Blockly.Msg.CONTROLS_IF_MSG_IF = "jeśli";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Jeśli wartość jest prawdziwa,  to wykonaj kilka instrukcji.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Jeśli wartość jest prawdą, to wykonaj pierwszy blok instrukcji.  W przeciwnym razie, wykonaj drugi blok instrukcji.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Jeśli pierwsza wartość jest prawdą, to wykonaj pierwszy blok instrukcji.  W przeciwnym razie, jeśli druga wartość jest prawdą, to wykonaj drugi blok instrukcji.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Jeśli pierwsza wartość jest prawdziwa, wykonaj pierwszy blok instrukcji.  W przeciwnym razie jeśli druga wartość jest prawdziwa, wykonaj drugi blok instrukcji.  Jeżeli żadna z wartości nie jest prawdziwa, wykonaj ostatni blok instrukcji.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "wykonaj";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "powtórz %1 razy";
Blockly.Msg.CONTROLS_REPEAT_TITLE_REPEAT = "powtórz";
Blockly.Msg.CONTROLS_REPEAT_TITLE_TIMES = "razy";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Wykonaj niektóre instrukcje kilka razy.";
Blockly.Msg.CONTROLS_SWITCH = "switch ";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_BREAK = "break";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_BREAK_TOOLTIP = "break the statement and leave the switch block.";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_BREAK_WARNING = "WARNING : This block must be in switch block.";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_CASE = "case";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_CASE_TOOLTIP = "Add case.";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_DEFAULT = "if there are no corresponding value";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_DO = "DO";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP1 = "if there are no corresponding value, do first block statement and if value correspond with second value, do second block statement.";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP2 = "if there are no corresponding value, do first block statement, if value correspond with second value, do second block statement, and if value correspond with third value, do third block statement.";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP3 = "if there are no corresponding value, do first block statement and if value correspond with second value, do second block statement, .... , and if value correspond with last value, do last block statement.";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP4 = "if there are no corresponding value, do first block statement and if value correspond with second value, do second block statement, .... , and if value correspond with last value, do last block statement.";  // untranslated
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "http://code.google.com/p/blockly/wiki/Repeat";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "powtarzaj aż";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "powtarzaj dopóki";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Gdy wartość jest nieprawdziwa, wykonaj kilka instrukcji.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Gdy wartość jest prawdziwa, wykonaj kilka instrukcji.";
Blockly.Msg.DEFINE_DECLARE_DEFAULT_NAME = "myMacro";  // untranslated
Blockly.Msg.DEFINE_DECLARE_INIT = "is";  // untranslated
Blockly.Msg.DEFINE_DECLARE_TITLE = "#define";  // untranslated
Blockly.Msg.DEFINE_GET_TITLE = "";  // untranslated
Blockly.Msg.DEFINE_SET_TYPE_CONSTANT = "constant";  // untranslated
Blockly.Msg.DEFINE_SET_TYPE_MACRO = "macro";  // untranslated
Blockly.Msg.DELETE_BLOCK = "Usuń blok";
Blockly.Msg.DELETE_X_BLOCKS = "Usunąć %1 bloki";
Blockly.Msg.DISABLE_BLOCK = "Wyłącz blok";
Blockly.Msg.DUPLICATE_BLOCK = "Powiel";
Blockly.Msg.ENABLE_BLOCK = "Włącz blok";
Blockly.Msg.EXPAND_ALL = "Rozwiń bloki";
Blockly.Msg.EXPAND_BLOCK = "Rozwiń blok";
Blockly.Msg.EXTERNAL_INPUTS = "Zewnętrzne wejścia";
Blockly.Msg.FUNCTION_SET_TYPE_CHAR = "char";  // untranslated
Blockly.Msg.FUNCTION_SET_TYPE_DOUBLE = "double";  // untranslated
Blockly.Msg.FUNCTION_SET_TYPE_FLOAT = "float";  // untranslated
Blockly.Msg.FUNCTION_SET_TYPE_INT = "int";  // untranslated
Blockly.Msg.FUNCTION_SET_TYPE_LONG = "long";  // untranslated
Blockly.Msg.FUNCTION_SET_TYPE_LONGDOUBLE = "long double";  // untranslated
Blockly.Msg.FUNCTION_SET_TYPE_LONGLONG = "long long";  // untranslated
Blockly.Msg.FUNCTION_SET_TYPE_SHORT = "short";  // untranslated
Blockly.Msg.HELP = "Pomoc";
Blockly.Msg.INLINE_INPUTS = "Webdowane wejscia";
Blockly.Msg.IOSTREAM_CIN_MUTATOR_CINADD_TITLE = ">>";  // untranslated
Blockly.Msg.IOSTREAM_CIN_TITLE = "cin >>";  // untranslated
Blockly.Msg.IOSTREAM_CIN_TOOLTIP = "Read input from terminal";  // untranslated
Blockly.Msg.IOSTREAM_COUT_MUTATOR_COUTADD_TITLE = "<<";  // untranslated
Blockly.Msg.IOSTREAM_COUT_TITLE = "cout <<";  // untranslated
Blockly.Msg.IOSTREAM_NEWLINE_TITLE = "end line";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://en.wikipedia.org/wiki/Linked_list#Empty_lists";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "utwórz pustą listę";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Zwraca listę, o długości 0, nie zawierającą rekordów z danymi";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "lista";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Dodać, usunąć lub zmienić kolejność sekcji żeby zrekonfigurować blok tej listy.";
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "Tworzenie listy z";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Dodaj element do listy.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Utwórz listę z dowolną ilością elementów.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "pierwszy";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# od końca";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Msg.LISTS_GET_INDEX_GET = "pobierz";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "Pobierz i usuń";
Blockly.Msg.LISTS_GET_INDEX_LAST = "ostatni";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "losowy";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "usuń";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Zwraca pierwszy element z listy.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Zwraca element z określonej pozycji na liście. #1 to ostatni element.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Zwraca element z konkretnej pozycji na liście. #1 to pierwszy element.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Zwraca ostatni element z listy.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Zwraca losowy element z listy.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Usuwa i zwraca pierwszy element z listy.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Usuwa i zwraca element z określonej pozycji na liście. #1 to ostatni element.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Usuwa i zwraca element z określonej pozycji na liście. #1 to pierwszy element.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Usuwa i zwraca ostatni element z listy.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Usuwa i zwraca losowy element z listy.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Usuwa pierwszy element z listy.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Usuwa element z określonej pozycji na liście. #1 to ostatni element.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Usuwa element z określonej pozycji na liście. #1 to pierwszy element.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Usuwa ostatni element z listy.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Usuwa losowy element z listy.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "do # od końca";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "do #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "do ostatniego";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#Getting_a_sublist";
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "Pobierz listę podrzędną z pierwszego";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "Pobierz listę podrzędną z # od końca";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "Pobierz listę podrzędną z #";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Tworzy kopię z określoną część listy.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "znaleźć pierwsze wystąpienie elementu";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#Getting_Items_from_a_List";
Blockly.Msg.LISTS_INDEX_OF_LAST = "znajduje ostatanie wystąpienie elementu";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Zwraca indeks pierwszego/ostatniego wystąpienia elementu na liście.  Zwraca wartość 0, jeśli tekst nie zostanie znaleziony.";
Blockly.Msg.LISTS_INLIST = "na liście";
Blockly.Msg.LISTS_IS_EMPTY_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#is_empty";
Blockly.Msg.LISTS_IS_EMPTY_TITLE = "%1 jest pusty";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#length_of";
Blockly.Msg.LISTS_LENGTH_TITLE = "długość %1";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Zwraca długość listy.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#create_list_with";
Blockly.Msg.LISTS_REPEAT_TITLE = "stwórz listę, powtarzając element %1 %2 razy";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Tworzy listę składającą się z podanej wartości powtórzonej odpowiednią liczbę razy.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#in_list_..._set";
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "jako";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "wstaw w";
Blockly.Msg.LISTS_SET_INDEX_SET = "ustaw";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Wstawia element na początku listy.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Wstawia element w odpowiednim miejscu na liście. #1 to ostatni element.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Wstawia element w odpowiednim miejscu na liście. #1 to pierwszy element.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Wstaw element na koniec listy.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Wstawia element w losowym miejscu na liście.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Wstawia pierwszy element na liście.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Wstawia element w odpowiednie miejsce na liście. #1 to ostatni element.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Wstawia element w odpowiednie miejsce na liście. #1 to pierwszy element.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Wstawia ostatni element na liście.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Wstawia losowy element na liście.";
Blockly.Msg.LISTS_TOOLTIP = "Zwraca \"prawda\" jeśli lista jest pusta.";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "fałsz";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "http://code.google.com/p/blockly/wiki/True_False";
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Zwraca 'prawda' lub 'fałsz'.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "prawda";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Zwraca \"prawda\", jeśli obie dane wejściowe są sobie równe.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Zwraca \"prawda\" jeśli pierwszy dany element jest większy od drugiego.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Zwraca \"prawda\", jeśli pierwsza dana wejściowa jest większa niż lub równa drugiej danej wejściowej.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Zwraca \"prawda\" jeśli pierwsza dana wejściowa jest większa od drugiej.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Zwraca \"prawda\", jeśli pierwsza dana wejściowa jest większa lub równa drugiej danej wejściowej.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Zwraca \"prawda\", jeśli obie dane wejściowe nie są sobie równe.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "http://code.google.com/p/blockly/wiki/Not";
Blockly.Msg.LOGIC_NEGATE_TITLE = "nie %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Zwraca \"prawda\", jeśli dane wejściowe są fałszywe.  Zwraca \"fałsz\", jeśli dana wejściowa jest prawdziwa.";
Blockly.Msg.LOGIC_NULL = "nic";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Zwraca zero.";
Blockly.Msg.LOGIC_OPERATION_AND = "i";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "http://code.google.com/p/blockly/wiki/And_Or";
Blockly.Msg.LOGIC_OPERATION_OR = "lub";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Zwraca \"prawda\" jeśli oba dane elementy mają wartość \"prawda\".";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Zwraca \"prawda\" jeśli co najmniej jeden dany element ma wartość \"prawda\".";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "test";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "jeśli fałsz";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "jeśli prawda";
Blockly.Msg.MAINPROCEDURES_TOOLTIP = "basically provided main function block. return integer value";  // untranslated
Blockly.Msg.MAIN_BLOCK = "on start";  // untranslated
Blockly.Msg.MAIN_BLOCK_RETURN = "int type return value:";  // untranslated
Blockly.Msg.MATH_ABS_TITLE = "absolute value%1";  // untranslated
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://pl.wikipedia.org/wiki/Arytmetyka";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Zwroci sume dwoch numerow.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Zwróć iloraz dwóch liczb.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Zwroci roznicy miedzy dwoch numerow.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Zwróć iloczyn dwóch liczb.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Zwróć pierwszą liczbę podniesioną do potęgi drugiej liczby.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_INPUT_BY = "o";
Blockly.Msg.MATH_CHANGE_TITLE_CHANGE = "zmien";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Zwróć jedną wspólną stałą: π (3.141), e (2.718...), φ (1.618...), sqrt(2) (1.414...), sqrt(½) (0.707...) lub ∞ (nieskończoność).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
Blockly.Msg.MATH_CONSTRAIN_TITLE = "zaokrągl %1 w dół %2 w górę %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Zaokrągl liczbę, aby była w określonych granicach (włącznie).";
Blockly.Msg.MATH_COS_TITLE = "cos %1";  // untranslated
Blockly.Msg.MATH_DIVISION_SYMBOL = "/";
Blockly.Msg.MATH_EXP_TITLE = "exp %1";  // untranslated
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "jest podzielna przez";
Blockly.Msg.MATH_IS_EVEN = "jest parzysta";
Blockly.Msg.MATH_IS_NEGATIVE = "jest ujemna";
Blockly.Msg.MATH_IS_ODD = "jest nieparzysta";
Blockly.Msg.MATH_IS_POSITIVE = "jest dodatnia";
Blockly.Msg.MATH_IS_PRIME = "jest liczbą pierwszą";
Blockly.Msg.MATH_IS_TOOLTIP = "Sprawdź, czy liczba jest parzysta, nieparzysta, pierwsza, całkowita, dodatnia, ujemna, lub jeśli jest podzielna przez konkretną liczbę.  Zwraca wartość \"prawda\" lub \"fałsz\".";
Blockly.Msg.MATH_IS_WHOLE = "jest liczbą całkowitą";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg.MATH_MODULO_TITLE = "reszta z dzielenia %1 przez %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Zwraca resztę z dzielenia dwóch liczb przez siebie.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";
Blockly.Msg.MATH_NUMBER_HELPURL = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Liczba.";
Blockly.Msg.MATH_NUMCHECK_ISFINITE = "finite value";  // untranslated
Blockly.Msg.MATH_NUMCHECK_ISINF = "infinite value";  // untranslated
Blockly.Msg.MATH_NUMCHECK_ISNAN = "NaN value";  // untranslated
Blockly.Msg.MATH_NUMCHECK_SIGNBIT = "negative value";  // untranslated
Blockly.Msg.MATH_NUMCHECK_TITLE = "%1 is a(an) %2 ?";  // untranslated
Blockly.Msg.MATH_NUMCHECK_TOOLTIP = "";  // untranslated
Blockly.Msg.MATH_NUMCOMPARE_ISGREATER = "greater";  // untranslated
Blockly.Msg.MATH_NUMCOMPARE_ISGREQ = "greater or equal";  // untranslated
Blockly.Msg.MATH_NUMCOMPARE_ISLEEQ = "less or equal";  // untranslated
Blockly.Msg.MATH_NUMCOMPARE_ISLEGR = "less or greater";  // untranslated
Blockly.Msg.MATH_NUMCOMPARE_ISLESS = "less";  // untranslated
Blockly.Msg.MATH_NUMCOMPARE_ISUNORDER = "unordered";  // untranslated
Blockly.Msg.MATH_NUMCOMPARE_TITLE = "%1 is %3 than %2";  // untranslated
Blockly.Msg.MATH_NUMCOMPARE_TOOLTIP = "";  // untranslated
Blockly.Msg.MATH_ONLIST_HELPURL = "";
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "średnia z listy";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "maksymalna wartość z listy";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "mediana z listy";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "minimalna wartość z listy";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "dominanty listy";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "losowy element z listy";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "odchylenie standardowe z listy";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "suma z listy";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Zwróć średnią (średnią arytmetyczną) wartości liczbowych z listy.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Zwraca najwyzszy numer w liscie.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Zwróć medianę liczby na liście.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Zwraca najnizszy numer w liscie.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Zwróć listę najczęściej występujących elementów na liście.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Zwróć losowy element z listy.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Zwróć odchylenie standardowe listy.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Zwraca sume wszystkich liczb z listy.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_POW_TITLE = "pow %1 ^ %2";  // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "losowy ułamek";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Zwróć losowy ułamek między 0.0 (włącznie), a 1.0 (wyłącznie).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "losowa liczba całkowita od %1 do %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Zwróć losową liczbę całkowitą w ramach dwóch określonych granic, włącznie.";
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg.MATH_ROUND_OPERATOR_CEIL = "round up";  // untranslated
Blockly.Msg.MATH_ROUND_OPERATOR_FLOOR = "round down";  // untranslated
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "zaokrąglić";
Blockly.Msg.MATH_ROUND_OPERATOR_TRUNC = "truncate";  // untranslated
Blockly.Msg.MATH_ROUND_TOOLTIP = "Zaokrąglić w górę lub w dół.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "wartość bezwzględna";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "pierwiastek kwadratowy";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Zwróć wartość bezwzględną danej liczby.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Zwraca e do potęgi danej liczby.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG = "Return the natural logarithm of a number.";  // untranslated
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Zwróć logarytm dziesiętny danej liczby.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG2 = "Return the base 2 logarithm of a number.";  // untranslated
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Zwróć negację danej liczby.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW = "Return base to the power of a number.";  // untranslated
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Zwróć pierwiastek kwadratowy danej liczby.";
Blockly.Msg.MATH_SIN_TITLE = "sin %1";  // untranslated
Blockly.Msg.MATH_SQRT_TITLE = "sqrt %1";  // untranslated
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_TAN_TITLE = "tan %1";  // untranslated
Blockly.Msg.MATH_TRIG_ACOS = "arc cos";
Blockly.Msg.MATH_TRIG_ASIN = "arc sin";
Blockly.Msg.MATH_TRIG_ATAN = "arc tan";
Blockly.Msg.MATH_TRIG_COS = "cos";
Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg.MATH_TRIG_LOG = "log";  // untranslated
Blockly.Msg.MATH_TRIG_LOG10 = "log10";  // untranslated
Blockly.Msg.MATH_TRIG_LOG2 = "log2";  // untranslated
Blockly.Msg.MATH_TRIG_SIN = "sin";
Blockly.Msg.MATH_TRIG_TAN = "tan";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Zwróć arcus cosinus danej liczby.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Zwróć arcus sinus danej liczby.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Zwróć arcus tangens danej liczby.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Zwraca wartość cosinusa o stopniu (nie radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Zwraca wartość sinusa o stopniu (nie radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Zwróć tangens o stopniu (nie radian).";
Blockly.Msg.ME = "Ja";
Blockly.Msg.NEW_VARIABLE = "Nowa zmienna...";
Blockly.Msg.NEW_VARIABLE_TITLE = "Nowa nazwa zmiennej:";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";
Blockly.Msg.PLZ_INSIDE_FUNCTION = "Warning: Place this block inside a function.";  // untranslated
Blockly.Msg.PLZ_OUT_OF_BLOCK = "Warning: This block can be placed out of other blocks except function block.";  // untranslated
Blockly.Msg.PLZ_OUT_OF_FUNCTION = "Warning: Place this block out of a function.";  // untranslated
Blockly.Msg.POINTER_GET_TITLE = "";  // untranslated
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "allow statements";  // untranslated
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "z:";
Blockly.Msg.PROCEDURES_CALLNORETURN_CALL = "";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "z:";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "zrób coś";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "do";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Tworzy funkcję bez wyniku.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "zwróć";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Tworzy funkcję z wynikiem.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Ostrzeżenie: Ta funkcja ma powtórzone parametry.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Podświetl definicję funkcji";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Jeśli wartość jest prawdziwa, zwróć drugą wartość.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Ostrzeżenie: Ten blok może być używany tylko w definicji funkcji.";
Blockly.Msg.PROCEDURES_ILLEGALNAME = "illegal function name";  // untranslated
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "nazwa wejścia:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Dodaj dane wejściowe do funkcji.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "wejścia";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Dodaj, usuń lub zmień kolejność danych wejściowych dla tej funkcji.";
Blockly.Msg.PROCEDURES_RETURN_TITLE = "terminate function after return ";  // untranslated
Blockly.Msg.PROCEDURES_RETURN_TOOLTIP = "Terminate function after return what you want to return. you can use it in anywhere";  // untranslated
Blockly.Msg.REMOVE_COMMENT = "Usuń Komentarz";
Blockly.Msg.RENAME_VARIABLE = "Zmień nazwę zmiennej...";
Blockly.Msg.SELECT_MENU = "--Select--";  // untranslated
Blockly.Msg.SELECT_TYPE = "--Type--";  // untranslated
Blockly.Msg.STDIO_NEWLINE_HELPURL = "https://en.wikipedia.org/wiki/Newline";  // untranslated
Blockly.Msg.STDIO_NEWLINE_TITLE = "new line";  // untranslated
Blockly.Msg.STDIO_NEWLINE_TOOLTIP = "new line character";  // untranslated
Blockly.Msg.STDIO_PRINTF_TITLE = "printf";  // untranslated
Blockly.Msg.STDIO_SCANF_HELPURL = "https://en.wikipedia.org/wiki/Scanf_format_string";  // untranslated
Blockly.Msg.STDIO_SCANF_TITLE = "scanf";  // untranslated
Blockly.Msg.STDIO_SCANF_TOOLTIP = "";  // untranslated
Blockly.Msg.STDIP_PRINTF_MUTATOR_PRINTFADD_TITLE = "Add";  // untranslated
Blockly.Msg.STDIP_SCANF_MUTATOR_SCANFADD_TITLE = "Add";  // untranslated
Blockly.Msg.STDLIB_ARITHFORMALLOC_TITLE = "%1 x %2";  // untranslated
Blockly.Msg.STDLIB_CONVERT_DOUBLE = "double";  // untranslated
Blockly.Msg.STDLIB_CONVERT_HELPURL = "https://en.wikipedia.org/wiki/C_string_handling";  // untranslated
Blockly.Msg.STDLIB_CONVERT_INT = "int";  // untranslated
Blockly.Msg.STDLIB_CONVERT_TITLE = "Convert string %1 to %2";  // untranslated
Blockly.Msg.STDLIB_CONVERT_TOOLTIP = "Convert stirng to integer or double type.";  // untranslated
Blockly.Msg.STDLIB_EXIT_FAILURE = "failure";  // untranslated
Blockly.Msg.STDLIB_EXIT_HELPURL = "https://en.wikipedia.org/wiki/Exit_(system_call)";  // untranslated
Blockly.Msg.STDLIB_EXIT_SUCCESS = "success";  // untranslated
Blockly.Msg.STDLIB_EXIT_TITLE = "exit %1";  // untranslated
Blockly.Msg.STDLIB_EXIT_TOOLTIP = "Exit.";  // untranslated
Blockly.Msg.STDLIB_FREE_HELPURL = "https://en.wikipedia.org/wiki/C_dynamic_memory_allocation";  // untranslated
Blockly.Msg.STDLIB_FREE_TITLE = "free %1";  // untranslated
Blockly.Msg.STDLIB_FREE_TOOLTIP = "deallocate the memory";  // untranslated
Blockly.Msg.STDLIB_MALLOC_HELPURL = "https://en.wikipedia.org/wiki/C_dynamic_memory_allocation";  // untranslated
Blockly.Msg.STDLIB_MALLOC_TITLE = "malloc %1";  // untranslated
Blockly.Msg.STDLIB_MALLOC_TOOLTIP = "Dinamic memory allocation";  // untranslated
Blockly.Msg.STDLIB_RANDSCOPE_HELPURL = "https://en.wikipedia.org/wiki/C_mathematical_functions#Random_number_generation";  // untranslated
Blockly.Msg.STDLIB_RANDSCOPE_TITLE = "scope:%1~%2";  // untranslated
Blockly.Msg.STDLIB_RANDSCOPE_TOOLTIP = "assign scope of random number.";  // untranslated
Blockly.Msg.STDLIB_RAND_HELPURL = "https://en.wikipedia.org/wiki/C_mathematical_functions#Random_number_generation";  // untranslated
Blockly.Msg.STDLIB_RAND_TITLE = "rand %1";  // untranslated
Blockly.Msg.STDLIB_RAND_TOOLTIP = "assign random number";  // untranslated
Blockly.Msg.STDLIB_SIZEOFFORMALLOC_HELPURL = "https://en.wikipedia.org/wiki/Sizeof";  // untranslated
Blockly.Msg.STDLIB_SIZEOFFORMALLOC_TITLE = "size of %1";  // untranslated
Blockly.Msg.STDLIB_SIZEOFFORMALLOC_TOOLTIP = "return the size by byte";  // untranslated
Blockly.Msg.STDLIB_SRAND_TITLE = "srand %1";  // untranslated
Blockly.Msg.STRING_STRCAT_HELPURL = "https://en.wikipedia.org/wiki/C_string_handling";  // untranslated
Blockly.Msg.STRING_STRCAT_TITLE = "string add %1 and %2";  // untranslated
Blockly.Msg.STRING_STRCAT_TOOLTIP = "concat two strings";  // untranslated
Blockly.Msg.STRING_STRCMP_HELPURL = "https://en.wikipedia.org/wiki/C_string_handling";  // untranslated
Blockly.Msg.STRING_STRCMP_TITLE = "string compare %1 and %2";  // untranslated
Blockly.Msg.STRING_STRCMP_TOOLTIP = "compare two strings";  // untranslated
Blockly.Msg.STRING_STRCPY_HELPURL = "https://en.wikipedia.org/wiki/C_string_handling";  // untranslated
Blockly.Msg.STRING_STRCPY_TITLE = "string copy from %1 to %2";  // untranslated
Blockly.Msg.STRING_STRCPY_TOOLTIP = "copy first string into second string";  // untranslated
Blockly.Msg.STRING_STRLEN_HELPURL = "https://en.wikipedia.org/wiki/C_string_handling";  // untranslated
Blockly.Msg.STRING_STRLEN_TITLE = "string length %1";  // untranslated
Blockly.Msg.STRING_STRLEN_TOOLTIP = "return length of string";  // untranslated
Blockly.Msg.STRUCTURE_DECLARE_NAME = "myStructure1";  // untranslated
Blockly.Msg.STRUCTURE_DECLARE_TALE = "name";  // untranslated
Blockly.Msg.STRUCTURE_DECLARE_TITLE = "type";  // untranslated
Blockly.Msg.STRUCTURE_DECLARE_TOOPTIP = "declare structure by selecting predefined structure(similar with declaring variables). it must be before using structure.";  // untranslated
Blockly.Msg.STRUCTURE_DEFINE_NAME = "myStructure";  // untranslated
Blockly.Msg.STRUCTURE_DEFINE_TITLE = "structure type name";  // untranslated
Blockly.Msg.STRUCTURE_DEFINE_TOOPTIP = "define structure. you can add, delete, rename the member of structure. it must be before using structure.";  // untranslated
Blockly.Msg.STRUCTURE_GET_MEMBER = "member";  // untranslated
Blockly.Msg.STRUCTURE_GET_NAME = "name";  // untranslated
Blockly.Msg.STRUCTURE_GET_TOOLTIP = "return value of structure member or structure itself.";  // untranslated
Blockly.Msg.STRUCTURE_ILLEGALNAME = "illegal structure name";  // untranslated
Blockly.Msg.STRUCTURE_MUTATORARG_NAME = "name";  // untranslated
Blockly.Msg.STRUCTURE_MUTATORARG_TOOLTIP = "add member of structure.";  // untranslated
Blockly.Msg.STRUCTURE_MUTATORCONTAINER_TITLE = "members";  // untranslated
Blockly.Msg.STRUCTURE_MUTATORCONTAINER_TOOLTIP = "add, delete, or rearrange member.";  // untranslated
Blockly.Msg.STRUCTURE_MUTATORMEM_ARRAY = "array type";  // untranslated
Blockly.Msg.STRUCTURE_MUTATORMEM_POINTER = "pointer type";  // untranslated
Blockly.Msg.STRUCTURE_MUTATORMEM_VAR = "variable type";  // untranslated
Blockly.Msg.STRUCTURE_SET_MEMBER = "member";  // untranslated
Blockly.Msg.STRUCTURE_SET_NAME = "name";  // untranslated
Blockly.Msg.STRUCTURE_SET_TOOLTIP = "assignment(set) the value into structure member or structure itself.";  // untranslated
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "dołącz tekst";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_modification";
Blockly.Msg.TEXT_APPEND_TO = "do";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Adjusting_text_case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "zmień na małe litery";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "zmień na od Wielkich Liter";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "zmień na WIELKIE LITERY";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Zwraca kopię tekstu z inną wielkością liter.";
Blockly.Msg.TEXT_CHARAT_FIRST = "pobierz pierwszą literę";
Blockly.Msg.TEXT_CHARAT_FROM_END = "pobierz literę # od końca";
Blockly.Msg.TEXT_CHARAT_FROM_START = "pobierz literę #";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Extracting_text";
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "z tekstu";
Blockly.Msg.TEXT_CHARAT_LAST = "pobierz ostatnią literę";
Blockly.Msg.TEXT_CHARAT_RANDOM = "pobierz losową literę";
Blockly.Msg.TEXT_CHARAT_TAIL = "";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Zwraca literę na określonej pozycji.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Dodaj element do tekstu.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "połącz";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Dodaj, usuń lub zmień kolejność sekcji, aby zmodyfikować blok tekstowy.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "do litery # od końca";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "do litery #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "do ostatniej litery";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "http://code.google.com/p/blockly/wiki/Text#Extracting_a_region_of_text";
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "w tekście";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "pobierz podsłowo od pierwszej litery";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "pobierz podsłowo od litery # od końca";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "pobierz podsłowo od litery #";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Zwraca określoną część tekstu.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Finding_text";
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "w tekście";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "znajdź pierwsze wystąpienie tekstu";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "znajdź ostatnie wystąpienie tekstu";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Zwraca indeks pierwszego/ostatniego wystąpienia pierwszego tekstu w drugim tekście. Zwraca wartość 0, jeśli tekst nie został znaleziony.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Checking_for_empty_text";
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 jest pusty";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Zwraca prawda (true), jeśli podany tekst jest pusty.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_creation";
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "utwórz tekst z";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Utwórz fragment tekstu, łącząc ze sobą dowolną liczbę tekstów.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_modification";
Blockly.Msg.TEXT_LENGTH_TITLE = "długość %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Zwraca liczbę liter (łącznie ze spacjami) w podanym tekście.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Printing_text";
Blockly.Msg.TEXT_PRINT_TITLE = "wydrukuj %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Drukuj określony tekst, liczbę lub coś innego.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Getting_input_from_the_user";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Zapytaj użytkownika  o liczbę.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Zapytaj użytkownika o jakiś tekst.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "poproś o liczbę z tą wiadomością";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "poproś o tekst z tą wiadomością";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "Litera, wyraz lub linia tekstu.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Trimming_%28removing%29_spaces";
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "usuń spacje po obu stronach";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "usuń spacje z lewej strony";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "usuń spacje z prawej strony";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Zwróć kopię tekstu z usuniętymi spacjami z jednego lub z obu końców tekstu.";
Blockly.Msg.TIME_REQRUIEDTIME_TALE = "save in double variable %1";  // untranslated
Blockly.Msg.TIME_REQUIREDTIME_TITLE = "time to do followings";  // untranslated
Blockly.Msg.TIME_REQUIREDTIME_TOOLTIP = "save the time that is taken for doing followings into double variable";  // untranslated
Blockly.Msg.TIME_TIME_CURRENT_TITLE = "print current time";  // untranslated
Blockly.Msg.UNION_DEFINE_NAME = "myUnion";  // untranslated
Blockly.Msg.VARIABLES_ARRAY_DECLARE_DEFAULT_NAME = "myArray";  // untranslated
Blockly.Msg.VARIABLES_ARRAY_DECLARE_LENGTH = "length";  // untranslated
Blockly.Msg.VARIABLES_ARRAY_DECLARE_TITLE = "array";  // untranslated
Blockly.Msg.VARIABLES_DECLARE_DEFAULT_NAME = "myVariable";  // untranslated
Blockly.Msg.VARIABLES_DECLARE_INIT = "initial value";  // untranslated
Blockly.Msg.VARIABLES_DECLARE_NAME = "name";  // untranslated
Blockly.Msg.VARIABLES_DECLARE_TITLE = "variable";  // untranslated
Blockly.Msg.VARIABLES_DECLARE_TOOLTIP = "declare variables";  // untranslated
Blockly.Msg.VARIABLES_DEFAULT_NAME = "element";
Blockly.Msg.VARIABLES_GET_HELPURL = "http://code.google.com/p/blockly/wiki/Variables#Get";
Blockly.Msg.VARIABLES_GET_TAIL = "";
Blockly.Msg.VARIABLES_GET_TITLE = "";
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Zwraca wartość tej zmiennej.";
Blockly.Msg.VARIABLES_ILLEGALNAME = "illegal variable name";  // untranslated
Blockly.Msg.VARIABLES_POINTER_DECLARE_DEFAULT_NAME = "myPointer";  // untranslated
Blockly.Msg.VARIABLES_POINTER_DECLARE_ITERATION = "";  // untranslated
Blockly.Msg.VARIABLES_POINTER_DECLARE_TITLE = "pointer";  // untranslated
Blockly.Msg.VARIABLES_RETURN = "return ";  // untranslated
Blockly.Msg.VARIABLES_SET_ARRAY_SPEC_ONE = "[]";  // untranslated
Blockly.Msg.VARIABLES_SET_ARRAY_SPEC_THREE = "[][][]";  // untranslated
Blockly.Msg.VARIABLES_SET_ARRAY_SPEC_TWO = "[][]";  // untranslated
Blockly.Msg.VARIABLES_SET_DIST_ARRAY = "array";  // untranslated
Blockly.Msg.VARIABLES_SET_DIST_POINTER = "pointer";  // untranslated
Blockly.Msg.VARIABLES_SET_DIST_VARIABLE = "variable";  // untranslated
Blockly.Msg.VARIABLES_SET_HELPURL = "http://code.google.com/p/blockly/wiki/Variables#Set";
Blockly.Msg.VARIABLES_SET_ITERATION_DOUBLE = "**";  // untranslated
Blockly.Msg.VARIABLES_SET_ITERATION_NORMAL = "*";  // untranslated
Blockly.Msg.VARIABLES_SET_ITERATION_TRIPLE = "***";  // untranslated
Blockly.Msg.VARIABLES_SET_POINTER_SPEC_ONE = "*";  // untranslated
Blockly.Msg.VARIABLES_SET_POINTER_SPEC_TWO = "**";  // untranslated
Blockly.Msg.VARIABLES_SET_TAIL = "wartość";
Blockly.Msg.VARIABLES_SET_TITLE = "przypisz";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Nadaj tej zmiennej wartość.";
Blockly.Msg.VARIABLES_SET_TYPE_CHAR = "character";  // untranslated
Blockly.Msg.VARIABLES_SET_TYPE_DOUBLE = "real number(double)";  // untranslated
Blockly.Msg.VARIABLES_SET_TYPE_FLOAT = "real number(float)";  // untranslated
Blockly.Msg.VARIABLES_SET_TYPE_INT = "integer";  // untranslated
Blockly.Msg.VARIABLES_SET_TYPE_UNSIGNED_INT = "unsigned int";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.VARIABLES_SET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.VARIABLES_GET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_CALLRETURN_CALL = Blockly.Msg.PROCEDURES_CALLNORETURN_CALL;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;


 // atuo generated donnot editBlockly.Msg.TAG_DEFINE_DECLARE = ['macro', 'constant'];
Blockly.Msg.TAG_DEFINE_GET = ['macro', 'constant', 'get'];
Blockly.Msg.TAG_VARIABLE_DECLARE = ['variables', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_VARIABLE_SET = ['variables', 'assignment', 'set'];
Blockly.Msg.TAG_VARIABLE_GET = ['variables', 'get'];
Blockly.Msg.TAG_VARIABLE_POINTER_DECLARE = ['pointer', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_VARIABLE_POINTER_SET = ['pointer', 'assignment', 'set'];
Blockly.Msg.TAG_VARIABLE_POINTER_GET = ['pointer', 'get'];
Blockly.Msg.TAG_VARIABLE_POINTER_ADDR = ['&', 'address'];
Blockly.Msg.TAG_VARIABLE_POINTER_ASTR = ['*', 'asterisk'];
Blockly.Msg.TAG_VARIABLE_ARRAY_DECLARE = ['array', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_VARIABLE_ARRAY_SET = ['array', 'assignment', 'set'];
Blockly.Msg.TAG_VARIABLE_ARRAY_GET = ['array', 'get'];

Blockly.Msg.TAG_STRUCTURE_DEFINE = ['structure', 'typedef', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_STRUCTURE_DECLARE = ['structure', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_STRUCTURE_GET = ['structure', 'get'];
Blockly.Msg.TAG_STRUCTURE_SET = ['structure', 'assignment', 'set'];

Blockly.Msg.TAG_LOGIC_IF = ['if', 'if else', 'ifelse'];
Blockly.Msg.TAG_LOGIC_COMPARE = ['compare'];
Blockly.Msg.TAG_LOGIC_OPERATION = ['operation', 'and', 'or'];
Blockly.Msg.TAG_LOGIC_NEGATE = ['!', 'negate'];
Blockly.Msg.TAG_LOGIC_BOOLEAN = ['boolean', 'true', 'false'];
Blockly.Msg.TAG_LOGIC_NULL = ['null', 'null character'];
Blockly.Msg.TAG_LOGIC_TERNARY = ['?'];
Blockly.Msg.TAG_LOGIC_SWITCH = ['switch', 'case'];

Blockly.Msg.TAG_LOOP_WHILE = ['while', 'loop'];
Blockly.Msg.TAG_LOOP_FOR = ['for', 'loop'];
Blockly.Msg.TAG_LOOP_FLOW = ['break', 'continue'];

Blockly.Msg.TAG_PROCEDURE_DEFNORETURN = ['void', 'function'];
Blockly.Msg.TAG_PROCEDURE_DEFRETURN = ['function'];

Blockly.Msg.TAG_STDIO_PRINTF = ['stdio.h', 'printf()', 'output', 'out'];
Blockly.Msg.TAG_STDIO_TEXT = ['stdio.h', 'text'];
Blockly.Msg.TAG_STDIO_NEWLINE = ['stdio.h', 'newline', 'new line', '\n', 'change line', 'line change'];
Blockly.Msg.TAG_STDIO_SCANF = ['stdio.h', 'scanf()', 'input'];

Blockly.Msg.TAG_IOSTREAM_COUT = ['iostream', 'cout', 'output', 'out'];
Blockly.Msg.TAG_IOSTREAM_TEXT = ['iostream', 'text'];
Blockly.Msg.TAG_IOSTREAM_NEWLINE = ['iostream', 'newline', 'new line', '\n', 'change line', 'line change'];
Blockly.Msg.TAG_IOSTREAM_CIN = ['iostream', 'cin', 'input'];

Blockly.Msg.TAG_COMMENT = ['comment', 'Comment', '\/\/', '\/**\/'];

Blockly.Msg.TAG_STDLIB_CONVERT = ['stdlib.h', 'convert', 'atoi()', 'atof()'];
Blockly.Msg.TAG_STDLIB_RAND = ['stdlib.h', 'random number'];
Blockly.Msg.TAG_STDLIB_MALLOC = ['stdlib.h', 'malloc()', 'memory allocation', 'memory allocate'];
Blockly.Msg.TAG_STDLIB_SIZEOF = ['stdlib.h', 'sizeof()', 'size of', 'sizeOf'];
Blockly.Msg.TAG_STDLIB_FREE = ['stdlib.h', 'free()'];
Blockly.Msg.TAG_STDLIB_EXIT = ['stdlib.h', 'exit(0)', 'exit(1)', 'end', 'the end'];

Blockly.Msg.TAG_STRING_STRLEN = ['string.h', 'strlen()', 'string length', 'length of string'];
Blockly.Msg.TAG_STRING_STRCAT = ['string.h', 'strcat()', 'string concatenate', 'concatenate string'];
Blockly.Msg.TAG_STRING_STRCPY = ['string.h', 'strcpy()', 'string copy', 'copy string'];
Blockly.Msg.TAG_STRING_STRCMP = ['string.h', 'strcmp()', 'string compare', 'compare string'];

Blockly.Msg.TAG_MATH_ABS = ['math.h', 'absolute value'];
Blockly.Msg.TAG_MATH_TRIG = ['math.h', 'trigonometric function', 'sin()', 'cos()', 'tan()', 'sine function', 'cosine function', 'tangent function'];
Blockly.Msg.TAG_MATH_LOGS = ['math.h', 'log()', 'loge()', 'log10()', 'log2()', 'log e'];
Blockly.Msg.TAG_MATH_POW = ['math.h', 'power', 'pow()'];
Blockly.Msg.TAG_MATH_EXP = ['math.h', 'exponential function', 'exp()'];
Blockly.Msg.TAG_MATH_SQRT = ['math.h', 'sqrt()', 'square root'];
Blockly.Msg.TAG_MATH_ROUND = ['math.h', 'round up', 'round down', 'round()', 'trunc()', 'ceil()', 'floor()', 'truncate'];
Blockly.Msg.TAG_MATH_NUMCHECK = ['math.h', 'two number check'];
Blockly.Msg.TAG_MATH_NUMCOMPARE = ['math.h', 'two number compare'];
Blockly.Msg.TAG_MATH_NUMBER = ['number'];
Blockly.Msg.TAG_MATH_ARITHMETIC = ['number', 'arithmetic', 'additionsubtractionmultiplicationdivision', '+-*/'];
Blockly.Msg.TAG_MATH_MODULO = ['arithmetic', 'remainder', '%'];

Blockly.Msg.TAG_TIME_CURRENT = ['time.h', 'get current time', 'print current time'];
Blockly.Msg.TAG_TIME_REQUIREDTIME = ['time.h', 'the time to do followings'];