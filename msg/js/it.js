// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.it');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Aggiungi commento";
Blockly.Msg.ARRAY_GET_TITLE = "";  // untranslated
Blockly.Msg.AUTH = "Autorizza questa applicazione per consentire di salvare il tuo lavoro e per essere condiviso.";
Blockly.Msg.CHANGE_VALUE_TITLE = "Modifica valore:";
Blockly.Msg.CHAT = "Chatta con il tuo collaboratore scrivendo in questo box!";
Blockly.Msg.COLLAPSE_ALL = "Comprimi blocchi";
Blockly.Msg.COLLAPSE_BLOCK = "Comprimi blocco";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "colore 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "colore 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";  // untranslated
Blockly.Msg.COLOUR_BLEND_RATIO = "rapporto";
Blockly.Msg.COLOUR_BLEND_TITLE = "miscela";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Mescola due colori insieme con un determinato rapporto (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://it.wikipedia.org/wiki/Colore";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Scegli un colore dalla tavolozza.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";  // untranslated
Blockly.Msg.COLOUR_RANDOM_TITLE = "colore casuale";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Scegli un colore a caso.";
Blockly.Msg.COLOUR_RGB_BLUE = "blu";
Blockly.Msg.COLOUR_RGB_GREEN = "verde";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";  // untranslated
Blockly.Msg.COLOUR_RGB_RED = "rosso";
Blockly.Msg.COLOUR_RGB_TITLE = "colora con";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Crea un colore con la quantità specificata di rosso, verde e blu. Tutti i valori devono essere compresi tra 0 e 100.";
Blockly.Msg.COMMENT_MUTATOR_COMMENTADD_TITLE = "Add";  // untranslated
Blockly.Msg.COMMENT_TITLE = "comment";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#Loop_Termination_Blocks";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "esce dal ciclo";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "prosegui con la successiva iterazione del ciclo";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Esce dal ciclo.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Salta il resto di questo ciclo e prosegue con la successiva iterazione.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Attenzioneː Questo blocco può essere usato solo in un ciclo.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#for_each for each block";  // untranslated
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST = "nella lista";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST_TAIL = "";  // untranslated
Blockly.Msg.CONTROLS_FOREACH_INPUT_ITEM = "per ogni elemento";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#count_with";  // untranslated
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO_BY = "da %1 a %2 per %3";
Blockly.Msg.CONTROLS_FOR_INPUT_WITH = "conta con";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Fa sì che la variabile %1 prenda tutti i valori a partire dal numero di partenza fino a quello di arrivo, con passo pari all'intervallo specificato, ed esegue il blocco indicato.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Aggiungi una condizione al blocco se.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Aggiungi una condizione finale pigliatutto al blocco se.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://code.google.com/p/blockly/wiki/If_Then";  // untranslated
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Aggiungi, elimina o riordina le sezioni per riconfigurare questo blocco se.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "altrimenti";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "altrimenti se";
Blockly.Msg.CONTROLS_IF_MSG_IF = "se";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Se un valore è vero allora esegue alcune istruzioni.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Se un valore è vero allora esegue il primo blocco di istruzioni. Altrimenti esegue il secondo blocco di istruzioni.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Se il primo valore è vero allora esegue un primo blocco di istruzioni. Altrimenti, se il secondo valore è vero, esegue un secondo blocco di istruzioni.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Se il primo valore è vero allora esegue un primo blocco di istruzioni. Altrimenti, se il secondo valore è vero, esegue un secondo blocco di istruzioni. Se nessuno dei valori è vero esegue l'ultimo blocco di istruzioni.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://it.wikipedia.org/wiki/Ciclo_for";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "fai";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "ripeti %1 volte";
Blockly.Msg.CONTROLS_REPEAT_TITLE_REPEAT = "ripeti";
Blockly.Msg.CONTROLS_REPEAT_TITLE_TIMES = "volte";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Esegue alcune istruzione diverse volte.";
Blockly.Msg.CONTROLS_SWITCH = "switch ";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_BREAK = "break";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_BREAK_TOOLTIP = "break the statement and leave the switch block.";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_BREAK_WARNING = "WARNING : This block must be in switch block.";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_CASE = "case";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_CASE_TOOLTIP = "Add case.";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_DEFAULT = "if there are no corresponding value";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_DO = "DO";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP1 = "if there are no corresponding value, do first block statement and if value correspond with second value, do second block statement.";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP2 = "if there are no corresponding value, do first block statement, if value correspond with second value, do second block statement, and if value correspond with third value, do third block statement.";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP3 = "if there are no corresponding value, do first block statement and if value correspond with second value, do second block statement, .... , and if value correspond with last value, do last block statement.";  // untranslated
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP4 = "if there are no corresponding value, do first block statement and if value correspond with second value, do second block statement, .... , and if value correspond with last value, do last block statement.";  // untranslated
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "ripeti fino a che";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "ripeti mentre";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Finché un valore è falso, esegue alcune istruzioni.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Finché un valore è vero, esegue alcune istruzioni.";
Blockly.Msg.DEFINE_DECLARE_DEFAULT_NAME = "myMacro";  // untranslated
Blockly.Msg.DEFINE_DECLARE_INIT = "is";  // untranslated
Blockly.Msg.DEFINE_DECLARE_TITLE = "#define";  // untranslated
Blockly.Msg.DEFINE_GET_TITLE = "";  // untranslated
Blockly.Msg.DEFINE_SET_TYPE_CONSTANT = "constant";  // untranslated
Blockly.Msg.DEFINE_SET_TYPE_MACRO = "macro";  // untranslated
Blockly.Msg.DELETE_BLOCK = "Cancella blocco";
Blockly.Msg.DELETE_X_BLOCKS = "Cancella %1 blocchi";
Blockly.Msg.DISABLE_BLOCK = "Disattiva blocco";
Blockly.Msg.DUPLICATE_BLOCK = "Duplica";
Blockly.Msg.ENABLE_BLOCK = "Attiva blocco";
Blockly.Msg.EXPAND_ALL = "Espandi blocchi";
Blockly.Msg.EXPAND_BLOCK = "Espandi blocco";
Blockly.Msg.EXTERNAL_INPUTS = "Ingressi esterni";
Blockly.Msg.FUNCTION_SET_TYPE_CHAR = "char";  // untranslated
Blockly.Msg.FUNCTION_SET_TYPE_DOUBLE = "double";  // untranslated
Blockly.Msg.FUNCTION_SET_TYPE_FLOAT = "float";  // untranslated
Blockly.Msg.FUNCTION_SET_TYPE_INT = "int";  // untranslated
Blockly.Msg.FUNCTION_SET_TYPE_LONG = "long";  // untranslated
Blockly.Msg.FUNCTION_SET_TYPE_LONGDOUBLE = "long double";  // untranslated
Blockly.Msg.FUNCTION_SET_TYPE_LONGLONG = "long long";  // untranslated
Blockly.Msg.FUNCTION_SET_TYPE_SHORT = "short";  // untranslated
Blockly.Msg.HELP = "Aiuto";
Blockly.Msg.INLINE_INPUTS = "Ingressi in linea";
Blockly.Msg.IOSTREAM_CIN_MUTATOR_CINADD_TITLE = ">>";  // untranslated
Blockly.Msg.IOSTREAM_CIN_TITLE = "cin >>";  // untranslated
Blockly.Msg.IOSTREAM_CIN_TOOLTIP = "Read input from terminal";  // untranslated
Blockly.Msg.IOSTREAM_COUT_MUTATOR_COUTADD_TITLE = "<<";  // untranslated
Blockly.Msg.IOSTREAM_COUT_TITLE = "cout <<";  // untranslated
Blockly.Msg.IOSTREAM_NEWLINE_TITLE = "end line";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://en.wikipedia.org/wiki/Linked_list#Empty_lists";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "crea lista vuota";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Restituisce una lista, di lunghezza 0, contenente nessun record di dati";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "lista";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Aggiungi, rimuovi o riordina le sezioni per riconfigurare il blocco lista.";
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "crea lista con";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Aggiunge un elemento alla lista.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Crea una lista con un certo numero di elementi.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "primo";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# dalla fine";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_GET = "prendi";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "prendi e rimuovi";
Blockly.Msg.LISTS_GET_INDEX_LAST = "ultimo";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "casuale";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "rimuovi";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Restituisce il primo elemento in una lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Restituisce l'elemento nella posizione indicata della lista. 1 corrisponde all'ultimo elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Restituisce l'elemento nella posizione indicata della lista. 1 corrisponde al primo elemento della lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Restituisce l'ultimo elemento in una lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Restituisce un elemento casuale in una lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Rimuove e restituisce il primo elemento in una lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Rimuove e restituisce l'elemento nella posizione indicata in una lista. 1 corrisponde all'ultimo elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Rimuove e restituisce l'elemento nella posizione indicata in una lista. 1 corrisponde al primo elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Restituisce e rimuove l'ultimo elemento in una lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Restituisce e rimuove un elemento casuale in una lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Rimuove il primo elemento in una lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Rimuove l'elemento nella posizione indicata in una lista. 1 corrisponde all'ultimo elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Rimuove l'elemento nella posizione indicata in una lista. 1 corrisponde al primo elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Rimuove l'ultimo elemento in una lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Rimuove un elemento casuale in una lista.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "da # dalla fine";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "fino a #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "dagli ultimi";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#Getting_a_sublist";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "prendi sotto-lista dall'inizio";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "prendi sotto-lista da # dalla fine";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "prendi sotto-lista da #";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Crea una copia della porzione specificata di una lista.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "trova la prima occorrenza dell'elemento";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#Getting_Items_from_a_List";  // untranslated
Blockly.Msg.LISTS_INDEX_OF_LAST = "trova l'ultima occorrenza dell'elemento";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Restituisce l'indice della prima/ultima occorrenza dell'elemento nella lista. Restituisce 0 se il testo non viene trovato.";
Blockly.Msg.LISTS_INLIST = "nella lista";
Blockly.Msg.LISTS_IS_EMPTY_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#is_empty";  // untranslated
Blockly.Msg.LISTS_IS_EMPTY_TITLE = "%1 è vuota";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#length_of";  // untranslated
Blockly.Msg.LISTS_LENGTH_TITLE = "lunghezza di %1";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Restituisce la lunghezza della lista";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#create_list_with";  // untranslated
Blockly.Msg.LISTS_REPEAT_TITLE = "crea una lista con l'elemento %1 ripetuto %2 volte";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Crea una lista costituita dal valore indicato ripetuto per il numero di volte specificato.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#in_list_..._set";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "come";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "inserisci in";
Blockly.Msg.LISTS_SET_INDEX_SET = "imposta";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserisci l'elemento all'inizio della lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Inserisci l'elemento nella posizione indicata in una lista. #1 corrisponde all'ultimo elemento.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Inserisci un elemento nella posizione indicata in una lista. #1 corrisponde al primo elemento.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Aggiungi un elemento alla fine di una lista";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserisce l'elemento casualmente in una lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Imposta il primo elemento in una lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Imposta l'elemento nella posizione indicata di una lista. 1 corrisponde all'ultimo elemento.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Imposta l'elemento nella posizione indicata di una lista. 1 corrisponde al primo elemento.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Imposta l'ultimo elemento in una lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Imposta un elemento casuale in una lista.";
Blockly.Msg.LISTS_TOOLTIP = "Restituisce vero se la lista è vuota.";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "falso";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://code.google.com/p/blockly/wiki/True_False";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Restituisce vero o falso.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "vero";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://it.wikipedia.org/wiki/Disuguaglianza";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Restituisce vero se gli input sono uno uguale all'altro.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Restituisce vero se il primo input è maggiore o uguale al secondo.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Restituisce uguale se il primo input è maggiore o uguale al secondo input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Restituisce vero se il primo input è minore del secondo.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Restituisce vero se il primo input è minore o uguale al secondo.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Restituisce vero se gli input non sono uno uguale all'altro.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://en.wikipedia.org/wiki/Negation";  // untranslated
Blockly.Msg.LOGIC_NEGATE_TITLE = "non %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Restituisce vero se l'input è falso. Restituisce falso se l'input è vero.";
Blockly.Msg.LOGIC_NULL = "nullo";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Restituisce valore nullo.";
Blockly.Msg.LOGIC_OPERATION_AND = "e";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://code.google.com/p/blockly/wiki/And_Or";  // untranslated
Blockly.Msg.LOGIC_OPERATION_OR = "o";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Restituisce vero se entrambi gli input sono veri.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Restituisce vero se almeno uno degli input è vero.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "test";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "se falso";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "se vero";
Blockly.Msg.MAINPROCEDURES_TOOLTIP = "basically provided main function block. return integer value";  // untranslated
Blockly.Msg.MAIN_BLOCK = "on start";  // untranslated
Blockly.Msg.MAIN_BLOCK_RETURN = "int type return value:";  // untranslated
Blockly.Msg.MATH_ABS_TITLE = "absolute value%1";  // untranslated
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://it.wikipedia.org/wiki/Aritmetica";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Restituisce la somma dei due numeri.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Restituisce il quoziente dei due numeri.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Restituisce la differenza dei due numeri.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Restituisce il prodotto dei due numeri.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Restituisce il primo numero elevato alla potenza del secondo numero.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://it.wikipedia.org/wiki/Addizione";
Blockly.Msg.MATH_CHANGE_INPUT_BY = "di";
Blockly.Msg.MATH_CHANGE_TITLE_CHANGE = "cambia";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://it.wikipedia.org/wiki/Costante_matematica";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Restituisce una delle costanti comuniː π (3.141…), e (2.718…), φ (1.618…), radq(2) (1.414…), radq(½) (0.707…) o ∞ (infinito).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";  // untranslated
Blockly.Msg.MATH_CONSTRAIN_TITLE = "costringi %1 da %2 a %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Costringe un numero all'interno dei limiti indicati (compresi).";
Blockly.Msg.MATH_COS_TITLE = "cos %1";  // untranslated
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";  // untranslated
Blockly.Msg.MATH_EXP_TITLE = "exp %1";  // untranslated
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "è divisibile per";
Blockly.Msg.MATH_IS_EVEN = "è pari";
Blockly.Msg.MATH_IS_NEGATIVE = "è negativo";
Blockly.Msg.MATH_IS_ODD = "è dispari";
Blockly.Msg.MATH_IS_POSITIVE = "è positivo";
Blockly.Msg.MATH_IS_PRIME = "è primo";
Blockly.Msg.MATH_IS_TOOLTIP = "Verifica se un numero è pari, dispari, primo, intero, positivo, negativo o se è divisibile per un certo numero. Restituisce vero o falso.";
Blockly.Msg.MATH_IS_WHOLE = "è intero";
Blockly.Msg.MATH_MODULO_HELPURL = "https://it.wikipedia.org/wiki/Resto";
Blockly.Msg.MATH_MODULO_TITLE = "resto di %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Restituisce il resto della divisione di due numeri.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";  // untranslated
Blockly.Msg.MATH_NUMBER_HELPURL = "https://it.wikipedia.org/wiki/Numero";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Un numero.";
Blockly.Msg.MATH_NUMCHECK_ISFINITE = "finite value";  // untranslated
Blockly.Msg.MATH_NUMCHECK_ISINF = "infinite value";  // untranslated
Blockly.Msg.MATH_NUMCHECK_ISNAN = "NaN value";  // untranslated
Blockly.Msg.MATH_NUMCHECK_SIGNBIT = "negative value";  // untranslated
Blockly.Msg.MATH_NUMCHECK_TITLE = "%1 is a(an) %2 ?";  // untranslated
Blockly.Msg.MATH_NUMCHECK_TOOLTIP = "";  // untranslated
Blockly.Msg.MATH_NUMCOMPARE_ISGREATER = "greater";  // untranslated
Blockly.Msg.MATH_NUMCOMPARE_ISGREQ = "greater or equal";  // untranslated
Blockly.Msg.MATH_NUMCOMPARE_ISLEEQ = "less or equal";  // untranslated
Blockly.Msg.MATH_NUMCOMPARE_ISLEGR = "less or greater";  // untranslated
Blockly.Msg.MATH_NUMCOMPARE_ISLESS = "less";  // untranslated
Blockly.Msg.MATH_NUMCOMPARE_ISUNORDER = "unordered";  // untranslated
Blockly.Msg.MATH_NUMCOMPARE_TITLE = "%1 is %3 than %2";  // untranslated
Blockly.Msg.MATH_NUMCOMPARE_TOOLTIP = "";  // untranslated
Blockly.Msg.MATH_ONLIST_HELPURL = "";  // untranslated
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "media della lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "massimo della lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "mediana della lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "minimo della lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "mode della lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "elemento casuale della lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "deviazione standard della lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "somma la lista";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Restituisce la media (media aritmetica) dei valori numerici nella lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Restituisce il più grande numero della lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Restituisce il valore mediano della lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Restituisce il più piccolo numero della lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Restituisce una lista degli elementi più frequenti nella lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Restituisce un elemento casuale della lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Restituisce la deviazione standard della lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Restituisce la somma si tutti i numeri nella lista.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";  // untranslated
Blockly.Msg.MATH_POW_TITLE = "pow %1 ^ %2";  // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://it.wikipedia.org/wiki/Numeri_pseudo-casuali";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "frazione casuale";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Restituisce una frazione compresa fra 0.0 (incluso) e 1.0 (escluso).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://it.wikipedia.org/wiki/Numeri_pseudo-casuali";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "intero casuale da %1 a %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Restituisce un numero intero casuale compreso tra i due limiti indicati (inclusi).";
Blockly.Msg.MATH_ROUND_HELPURL = "https://it.wikipedia.org/wiki/Arrotondamento";
Blockly.Msg.MATH_ROUND_OPERATOR_CEIL = "round up";  // untranslated
Blockly.Msg.MATH_ROUND_OPERATOR_FLOOR = "round down";  // untranslated
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "arrotonda";
Blockly.Msg.MATH_ROUND_OPERATOR_TRUNC = "truncate";  // untranslated
Blockly.Msg.MATH_ROUND_TOOLTIP = "Arrotonda un numero verso l'alto o verso il basso.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://it.wikipedia.org/wiki/Radice_quadrata";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "assoluto";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "radice quadrata";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Restituisce il valore assoluto del numero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Restituisce e elevato alla potenza del numero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG = "Return the natural logarithm of a number.";  // untranslated
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Restituisce il logaritmo in base 10 del numero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG2 = "Return the base 2 logarithm of a number.";  // untranslated
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Restituisce l'opposto del numero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW = "Return base to the power of a number.";  // untranslated
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Restituisce la radice quadrata del numero.";
Blockly.Msg.MATH_SIN_TITLE = "sin %1";  // untranslated
Blockly.Msg.MATH_SQRT_TITLE = "sqrt %1";  // untranslated
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";  // untranslated
Blockly.Msg.MATH_TAN_TITLE = "tan %1";  // untranslated
Blockly.Msg.MATH_TRIG_ACOS = "acos";  // untranslated
Blockly.Msg.MATH_TRIG_ASIN = "asin";  // untranslated
Blockly.Msg.MATH_TRIG_ATAN = "atan";  // untranslated
Blockly.Msg.MATH_TRIG_COS = "cos";  // untranslated
Blockly.Msg.MATH_TRIG_HELPURL = "https://it.wikipedia.org/wiki/Funzione_trigonometrica";
Blockly.Msg.MATH_TRIG_LOG = "log";  // untranslated
Blockly.Msg.MATH_TRIG_LOG10 = "log10";  // untranslated
Blockly.Msg.MATH_TRIG_LOG2 = "log2";  // untranslated
Blockly.Msg.MATH_TRIG_SIN = "sin";  // untranslated
Blockly.Msg.MATH_TRIG_TAN = "tan";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Restituisce l'arco-coseno di un numero.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Restituisce l'arco-seno di un numero.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Restituisce l'arco-tangente di un numero.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Restituisce il coseno di un angolo espresso in gradi (non radianti).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Restituisce il seno di un angolo espresso in gradi (non radianti).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Restituisce la tangente di un angolo espresso in gradi (non radianti).";
Blockly.Msg.ME = "Me";
Blockly.Msg.NEW_VARIABLE = "Nuova variabile...";
Blockly.Msg.NEW_VARIABLE_TITLE = "Nome della nuova variabile:";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";  // untranslated
Blockly.Msg.PLZ_INSIDE_FUNCTION = "Warning: Place this block inside a function.";  // untranslated
Blockly.Msg.PLZ_OUT_OF_BLOCK = "Warning: This block can be placed out of other blocks except function block.";  // untranslated
Blockly.Msg.PLZ_OUT_OF_FUNCTION = "Warning: Place this block out of a function.";  // untranslated
Blockly.Msg.POINTER_GET_TITLE = "";  // untranslated
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "consenti dichiarazioni";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "conː";
Blockly.Msg.PROCEDURES_CALLNORETURN_CALL = "";  // untranslated
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://it.wikipedia.org/wiki/Funzione_(informatica)";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://it.wikipedia.org/wiki/Funzione_(informatica)";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "conː";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "fai qualcosa";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "per";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Crea una funzione senza output.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "ritorna";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Crea una funzione con un output.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Attenzioneː Questa funzione ha parametri duplicati.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Evidenzia definizione di funzione";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Se un valore è vero allora restituisce un secondo valore.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Attenzioneː Questo blocco può essere usato solo all'interno di una definizione di funzione.";
Blockly.Msg.PROCEDURES_ILLEGALNAME = "illegal function name";  // untranslated
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "nome inputː";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Aggiungi un input alla funzione.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "input";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Aggiungi, rimuovi o riordina input alla funzione.";
Blockly.Msg.PROCEDURES_RETURN_TITLE = "terminate function after return ";  // untranslated
Blockly.Msg.PROCEDURES_RETURN_TOOLTIP = "Terminate function after return what you want to return. you can use it in anywhere";  // untranslated
Blockly.Msg.REMOVE_COMMENT = "Rimuovi commento";
Blockly.Msg.RENAME_VARIABLE = "Rinomina variabile...";
Blockly.Msg.SELECT_MENU = "--Select--";  // untranslated
Blockly.Msg.SELECT_TYPE = "--Type--";  // untranslated
Blockly.Msg.STDIO_NEWLINE_HELPURL = "https://en.wikipedia.org/wiki/Newline";  // untranslated
Blockly.Msg.STDIO_NEWLINE_TITLE = "new line";  // untranslated
Blockly.Msg.STDIO_NEWLINE_TOOLTIP = "new line character";  // untranslated
Blockly.Msg.STDIO_PRINTF_TITLE = "printf";  // untranslated
Blockly.Msg.STDIO_SCANF_HELPURL = "https://en.wikipedia.org/wiki/Scanf_format_string";  // untranslated
Blockly.Msg.STDIO_SCANF_TITLE = "scanf";  // untranslated
Blockly.Msg.STDIO_SCANF_TOOLTIP = "";  // untranslated
Blockly.Msg.STDIP_PRINTF_MUTATOR_PRINTFADD_TITLE = "Add";  // untranslated
Blockly.Msg.STDIP_SCANF_MUTATOR_SCANFADD_TITLE = "Add";  // untranslated
Blockly.Msg.STDLIB_ARITHFORMALLOC_TITLE = "%1 x %2";  // untranslated
Blockly.Msg.STDLIB_CONVERT_DOUBLE = "double";  // untranslated
Blockly.Msg.STDLIB_CONVERT_HELPURL = "https://en.wikipedia.org/wiki/C_string_handling";  // untranslated
Blockly.Msg.STDLIB_CONVERT_INT = "int";  // untranslated
Blockly.Msg.STDLIB_CONVERT_TITLE = "Convert string %1 to %2";  // untranslated
Blockly.Msg.STDLIB_CONVERT_TOOLTIP = "Convert stirng to integer or double type.";  // untranslated
Blockly.Msg.STDLIB_EXIT_FAILURE = "failure";  // untranslated
Blockly.Msg.STDLIB_EXIT_HELPURL = "https://en.wikipedia.org/wiki/Exit_(system_call)";  // untranslated
Blockly.Msg.STDLIB_EXIT_SUCCESS = "success";  // untranslated
Blockly.Msg.STDLIB_EXIT_TITLE = "exit %1";  // untranslated
Blockly.Msg.STDLIB_EXIT_TOOLTIP = "Exit.";  // untranslated
Blockly.Msg.STDLIB_FREE_HELPURL = "https://en.wikipedia.org/wiki/C_dynamic_memory_allocation";  // untranslated
Blockly.Msg.STDLIB_FREE_TITLE = "free %1";  // untranslated
Blockly.Msg.STDLIB_FREE_TOOLTIP = "deallocate the memory";  // untranslated
Blockly.Msg.STDLIB_MALLOC_HELPURL = "https://en.wikipedia.org/wiki/C_dynamic_memory_allocation";  // untranslated
Blockly.Msg.STDLIB_MALLOC_TITLE = "malloc %1";  // untranslated
Blockly.Msg.STDLIB_MALLOC_TOOLTIP = "Dinamic memory allocation";  // untranslated
Blockly.Msg.STDLIB_RANDSCOPE_HELPURL = "https://en.wikipedia.org/wiki/C_mathematical_functions#Random_number_generation";  // untranslated
Blockly.Msg.STDLIB_RANDSCOPE_TITLE = "scope:%1~%2";  // untranslated
Blockly.Msg.STDLIB_RANDSCOPE_TOOLTIP = "assign scope of random number.";  // untranslated
Blockly.Msg.STDLIB_RAND_HELPURL = "https://en.wikipedia.org/wiki/C_mathematical_functions#Random_number_generation";  // untranslated
Blockly.Msg.STDLIB_RAND_TITLE = "rand %1";  // untranslated
Blockly.Msg.STDLIB_RAND_TOOLTIP = "assign random number";  // untranslated
Blockly.Msg.STDLIB_SIZEOFFORMALLOC_HELPURL = "https://en.wikipedia.org/wiki/Sizeof";  // untranslated
Blockly.Msg.STDLIB_SIZEOFFORMALLOC_TITLE = "size of %1";  // untranslated
Blockly.Msg.STDLIB_SIZEOFFORMALLOC_TOOLTIP = "return the size by byte";  // untranslated
Blockly.Msg.STDLIB_SRAND_TITLE = "srand %1";  // untranslated
Blockly.Msg.STRING_STRCAT_HELPURL = "https://en.wikipedia.org/wiki/C_string_handling";  // untranslated
Blockly.Msg.STRING_STRCAT_TITLE = "string add %1 and %2";  // untranslated
Blockly.Msg.STRING_STRCAT_TOOLTIP = "concat two strings";  // untranslated
Blockly.Msg.STRING_STRCMP_HELPURL = "https://en.wikipedia.org/wiki/C_string_handling";  // untranslated
Blockly.Msg.STRING_STRCMP_TITLE = "string compare %1 and %2";  // untranslated
Blockly.Msg.STRING_STRCMP_TOOLTIP = "compare two strings";  // untranslated
Blockly.Msg.STRING_STRCPY_HELPURL = "https://en.wikipedia.org/wiki/C_string_handling";  // untranslated
Blockly.Msg.STRING_STRCPY_TITLE = "string copy from %1 to %2";  // untranslated
Blockly.Msg.STRING_STRCPY_TOOLTIP = "copy first string into second string";  // untranslated
Blockly.Msg.STRING_STRLEN_HELPURL = "https://en.wikipedia.org/wiki/C_string_handling";  // untranslated
Blockly.Msg.STRING_STRLEN_TITLE = "string length %1";  // untranslated
Blockly.Msg.STRING_STRLEN_TOOLTIP = "return length of string";  // untranslated
Blockly.Msg.STRUCTURE_DECLARE_NAME = "myStructure1";  // untranslated
Blockly.Msg.STRUCTURE_DECLARE_TALE = "name";  // untranslated
Blockly.Msg.STRUCTURE_DECLARE_TITLE = "type";  // untranslated
Blockly.Msg.STRUCTURE_DECLARE_TOOPTIP = "declare structure by selecting predefined structure(similar with declaring variables). it must be before using structure.";  // untranslated
Blockly.Msg.STRUCTURE_DEFINE_NAME = "myStructure";  // untranslated
Blockly.Msg.STRUCTURE_DEFINE_TITLE = "structure type name";  // untranslated
Blockly.Msg.STRUCTURE_DEFINE_TOOPTIP = "define structure. you can add, delete, rename the member of structure. it must be before using structure.";  // untranslated
Blockly.Msg.STRUCTURE_GET_MEMBER = "member";  // untranslated
Blockly.Msg.STRUCTURE_GET_NAME = "name";  // untranslated
Blockly.Msg.STRUCTURE_GET_TOOLTIP = "return value of structure member or structure itself.";  // untranslated
Blockly.Msg.STRUCTURE_ILLEGALNAME = "illegal structure name";  // untranslated
Blockly.Msg.STRUCTURE_MUTATORARG_NAME = "name";  // untranslated
Blockly.Msg.STRUCTURE_MUTATORARG_TOOLTIP = "add member of structure.";  // untranslated
Blockly.Msg.STRUCTURE_MUTATORCONTAINER_TITLE = "members";  // untranslated
Blockly.Msg.STRUCTURE_MUTATORCONTAINER_TOOLTIP = "add, delete, or rearrange member.";  // untranslated
Blockly.Msg.STRUCTURE_MUTATORMEM_ARRAY = "array type";  // untranslated
Blockly.Msg.STRUCTURE_MUTATORMEM_POINTER = "pointer type";  // untranslated
Blockly.Msg.STRUCTURE_MUTATORMEM_VAR = "variable type";  // untranslated
Blockly.Msg.STRUCTURE_SET_MEMBER = "member";  // untranslated
Blockly.Msg.STRUCTURE_SET_NAME = "name";  // untranslated
Blockly.Msg.STRUCTURE_SET_TOOLTIP = "assignment(set) the value into structure member or structure itself.";  // untranslated
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "aggiungi il testo";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_modification";  // untranslated
Blockly.Msg.TEXT_APPEND_TO = "a";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Adjusting_text_case";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "in minuscolo";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "con Iniziali Maiuscole";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "in MAIUSCOLO";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Restituisce una copia del testo in un diverso formato maiuscole/minuscole.";
Blockly.Msg.TEXT_CHARAT_FIRST = "prendi la prima lettera";
Blockly.Msg.TEXT_CHARAT_FROM_END = "prendi la lettera # dalla fine";
Blockly.Msg.TEXT_CHARAT_FROM_START = "prendi la lettera #";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Extracting_text";  // untranslated
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "nel testo";
Blockly.Msg.TEXT_CHARAT_LAST = "prendi l'ultima lettera";
Blockly.Msg.TEXT_CHARAT_RANDOM = "prendi lettera casuale";
Blockly.Msg.TEXT_CHARAT_TAIL = "";  // untranslated
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Restituisce la lettera nella posizione indicata.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Aggiungi un elemento al testo.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "unisci";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Aggiungi, rimuovi o riordina le sezioni per riconfigurare questo blocco testo.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "alla lettera # dalla fine";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "alla lettera #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "all'ultima lettera";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Extracting_a_region_of_text";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "nel testo";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "prendi sotto-stringa dalla prima lettera";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "prendi sotto-stringa dalla lettera # dalla fine";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "prendi sotto-stringa dalla lettera #";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Restituisce la porzione di testo indicata.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Finding_text";  // untranslated
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "nel testo";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "trova la prima occorrenza del testo";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "trova l'ultima occorrenza del testo";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";  // untranslated
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Restituisce l'indice della prima occorrenza del primo testo all'interno del secondo testo. Restituisce 0 se il testo non viene trovato.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Checking_for_empty_text";  // untranslated
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 è vuoto";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Restituisce vero se il testo fornito è vuoto.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_creation";  // untranslated
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "crea testo con";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Crea un blocco di testo unendo un certo numero di elementi.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_modification";  // untranslated
Blockly.Msg.TEXT_LENGTH_TITLE = "lunghezza di %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Restituisce il numero di lettere (inclusi gli spazi) nel testo fornito.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Printing_text";  // untranslated
Blockly.Msg.TEXT_PRINT_TITLE = "scrivi %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Scrive il testo, numero o altro valore indicato.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Getting_input_from_the_user";  // untranslated
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Richiedi un numero all'utente.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Richiede del testo da parte dell'utente.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "richiedi numero con messaggio";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "richiedi testo con messaggio";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://it.wikipedia.org/wiki/Stringa_(informatica)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "Una lettera, una parola o una linea di testo.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Trimming_%28removing%29_spaces";  // untranslated
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "rimuovi spazi da entrambi gli estremi";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "rimuovi spazi a sinistra";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "rimuovi spazi a destra";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Restituisce una copia del testo con gli spazi rimossi ad uno o entrambe le estremità.";
Blockly.Msg.TIME_REQRUIEDTIME_TALE = "save in double variable %1";  // untranslated
Blockly.Msg.TIME_REQUIREDTIME_TITLE = "time to do followings";  // untranslated
Blockly.Msg.TIME_REQUIREDTIME_TOOLTIP = "save the time that is taken for doing followings into double variable";  // untranslated
Blockly.Msg.TIME_TIME_CURRENT_TITLE = "print current time";  // untranslated
Blockly.Msg.UNION_DEFINE_NAME = "myUnion";  // untranslated
Blockly.Msg.VARIABLES_ARRAY_DECLARE_DEFAULT_NAME = "myArray";  // untranslated
Blockly.Msg.VARIABLES_ARRAY_DECLARE_LENGTH = "length";  // untranslated
Blockly.Msg.VARIABLES_ARRAY_DECLARE_TITLE = "array";  // untranslated
Blockly.Msg.VARIABLES_DECLARE_DEFAULT_NAME = "myVariable";  // untranslated
Blockly.Msg.VARIABLES_DECLARE_INIT = "initial value";  // untranslated
Blockly.Msg.VARIABLES_DECLARE_NAME = "name";  // untranslated
Blockly.Msg.VARIABLES_DECLARE_TITLE = "variable";  // untranslated
Blockly.Msg.VARIABLES_DECLARE_TOOLTIP = "declare variables";  // untranslated
Blockly.Msg.VARIABLES_DEFAULT_NAME = "elemento";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://code.google.com/p/blockly/wiki/Variables#Get";  // untranslated
Blockly.Msg.VARIABLES_GET_TAIL = "";  // untranslated
Blockly.Msg.VARIABLES_GET_TITLE = "";  // untranslated
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Restituisce il valore di una variabile.";
Blockly.Msg.VARIABLES_ILLEGALNAME = "illegal variable name";  // untranslated
Blockly.Msg.VARIABLES_POINTER_DECLARE_DEFAULT_NAME = "myPointer";  // untranslated
Blockly.Msg.VARIABLES_POINTER_DECLARE_ITERATION = "";  // untranslated
Blockly.Msg.VARIABLES_POINTER_DECLARE_TITLE = "pointer";  // untranslated
Blockly.Msg.VARIABLES_RETURN = "return ";  // untranslated
Blockly.Msg.VARIABLES_SET_ARRAY_SPEC_ONE = "[]";  // untranslated
Blockly.Msg.VARIABLES_SET_ARRAY_SPEC_THREE = "[][][]";  // untranslated
Blockly.Msg.VARIABLES_SET_ARRAY_SPEC_TWO = "[][]";  // untranslated
Blockly.Msg.VARIABLES_SET_DIST_ARRAY = "array";  // untranslated
Blockly.Msg.VARIABLES_SET_DIST_POINTER = "pointer";  // untranslated
Blockly.Msg.VARIABLES_SET_DIST_VARIABLE = "variable";  // untranslated
Blockly.Msg.VARIABLES_SET_HELPURL = "https://code.google.com/p/blockly/wiki/Variables#Set";  // untranslated
Blockly.Msg.VARIABLES_SET_ITERATION_DOUBLE = "**";  // untranslated
Blockly.Msg.VARIABLES_SET_ITERATION_NORMAL = "*";  // untranslated
Blockly.Msg.VARIABLES_SET_ITERATION_TRIPLE = "***";  // untranslated
Blockly.Msg.VARIABLES_SET_POINTER_SPEC_ONE = "*";  // untranslated
Blockly.Msg.VARIABLES_SET_POINTER_SPEC_TWO = "**";  // untranslated
Blockly.Msg.VARIABLES_SET_TAIL = "a";
Blockly.Msg.VARIABLES_SET_TITLE = "imposta";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Imposta questa variabile ad essere pari all'input.";
Blockly.Msg.VARIABLES_SET_TYPE_CHAR = "character";  // untranslated
Blockly.Msg.VARIABLES_SET_TYPE_DOUBLE = "real number(double)";  // untranslated
Blockly.Msg.VARIABLES_SET_TYPE_FLOAT = "real number(float)";  // untranslated
Blockly.Msg.VARIABLES_SET_TYPE_INT = "integer";  // untranslated
Blockly.Msg.VARIABLES_SET_TYPE_UNSIGNED_INT = "unsigned int";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.VARIABLES_SET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.VARIABLES_GET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_CALLRETURN_CALL = Blockly.Msg.PROCEDURES_CALLNORETURN_CALL;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;


 // atuo generated donnot editBlockly.Msg.TAG_DEFINE_DECLARE = ['macro', 'constant'];
Blockly.Msg.TAG_DEFINE_GET = ['macro', 'constant', 'get'];
Blockly.Msg.TAG_VARIABLE_DECLARE = ['variables', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_VARIABLE_SET = ['variables', 'assignment', 'set'];
Blockly.Msg.TAG_VARIABLE_GET = ['variables', 'get'];
Blockly.Msg.TAG_VARIABLE_POINTER_DECLARE = ['pointer', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_VARIABLE_POINTER_SET = ['pointer', 'assignment', 'set'];
Blockly.Msg.TAG_VARIABLE_POINTER_GET = ['pointer', 'get'];
Blockly.Msg.TAG_VARIABLE_POINTER_ADDR = ['&', 'address'];
Blockly.Msg.TAG_VARIABLE_POINTER_ASTR = ['*', 'asterisk'];
Blockly.Msg.TAG_VARIABLE_ARRAY_DECLARE = ['array', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_VARIABLE_ARRAY_SET = ['array', 'assignment', 'set'];
Blockly.Msg.TAG_VARIABLE_ARRAY_GET = ['array', 'get'];

Blockly.Msg.TAG_STRUCTURE_DEFINE = ['structure', 'typedef', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_STRUCTURE_DECLARE = ['structure', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_STRUCTURE_GET = ['structure', 'get'];
Blockly.Msg.TAG_STRUCTURE_SET = ['structure', 'assignment', 'set'];

Blockly.Msg.TAG_LOGIC_IF = ['if', 'if else', 'ifelse'];
Blockly.Msg.TAG_LOGIC_COMPARE = ['compare'];
Blockly.Msg.TAG_LOGIC_OPERATION = ['operation', 'and', 'or'];
Blockly.Msg.TAG_LOGIC_NEGATE = ['!', 'negate'];
Blockly.Msg.TAG_LOGIC_BOOLEAN = ['boolean', 'true', 'false'];
Blockly.Msg.TAG_LOGIC_NULL = ['null', 'null character'];
Blockly.Msg.TAG_LOGIC_TERNARY = ['?'];
Blockly.Msg.TAG_LOGIC_SWITCH = ['switch', 'case'];

Blockly.Msg.TAG_LOOP_WHILE = ['while', 'loop'];
Blockly.Msg.TAG_LOOP_FOR = ['for', 'loop'];
Blockly.Msg.TAG_LOOP_FLOW = ['break', 'continue'];

Blockly.Msg.TAG_PROCEDURE_DEFNORETURN = ['void', 'function'];
Blockly.Msg.TAG_PROCEDURE_DEFRETURN = ['function'];

Blockly.Msg.TAG_STDIO_PRINTF = ['stdio.h', 'printf()', 'output', 'out'];
Blockly.Msg.TAG_STDIO_TEXT = ['stdio.h', 'text'];
Blockly.Msg.TAG_STDIO_NEWLINE = ['stdio.h', 'newline', 'new line', '\n', 'change line', 'line change'];
Blockly.Msg.TAG_STDIO_SCANF = ['stdio.h', 'scanf()', 'input'];

Blockly.Msg.TAG_IOSTREAM_COUT = ['iostream', 'cout', 'output', 'out'];
Blockly.Msg.TAG_IOSTREAM_TEXT = ['iostream', 'text'];
Blockly.Msg.TAG_IOSTREAM_NEWLINE = ['iostream', 'newline', 'new line', '\n', 'change line', 'line change'];
Blockly.Msg.TAG_IOSTREAM_CIN = ['iostream', 'cin', 'input'];

Blockly.Msg.TAG_COMMENT = ['comment', 'Comment', '\/\/', '\/**\/'];

Blockly.Msg.TAG_STDLIB_CONVERT = ['stdlib.h', 'convert', 'atoi()', 'atof()'];
Blockly.Msg.TAG_STDLIB_RAND = ['stdlib.h', 'random number'];
Blockly.Msg.TAG_STDLIB_MALLOC = ['stdlib.h', 'malloc()', 'memory allocation', 'memory allocate'];
Blockly.Msg.TAG_STDLIB_SIZEOF = ['stdlib.h', 'sizeof()', 'size of', 'sizeOf'];
Blockly.Msg.TAG_STDLIB_FREE = ['stdlib.h', 'free()'];
Blockly.Msg.TAG_STDLIB_EXIT = ['stdlib.h', 'exit(0)', 'exit(1)', 'end', 'the end'];

Blockly.Msg.TAG_STRING_STRLEN = ['string.h', 'strlen()', 'string length', 'length of string'];
Blockly.Msg.TAG_STRING_STRCAT = ['string.h', 'strcat()', 'string concatenate', 'concatenate string'];
Blockly.Msg.TAG_STRING_STRCPY = ['string.h', 'strcpy()', 'string copy', 'copy string'];
Blockly.Msg.TAG_STRING_STRCMP = ['string.h', 'strcmp()', 'string compare', 'compare string'];

Blockly.Msg.TAG_MATH_ABS = ['math.h', 'absolute value'];
Blockly.Msg.TAG_MATH_TRIG = ['math.h', 'trigonometric function', 'sin()', 'cos()', 'tan()', 'sine function', 'cosine function', 'tangent function'];
Blockly.Msg.TAG_MATH_LOGS = ['math.h', 'log()', 'loge()', 'log10()', 'log2()', 'log e'];
Blockly.Msg.TAG_MATH_POW = ['math.h', 'power', 'pow()'];
Blockly.Msg.TAG_MATH_EXP = ['math.h', 'exponential function', 'exp()'];
Blockly.Msg.TAG_MATH_SQRT = ['math.h', 'sqrt()', 'square root'];
Blockly.Msg.TAG_MATH_ROUND = ['math.h', 'round up', 'round down', 'round()', 'trunc()', 'ceil()', 'floor()', 'truncate'];
Blockly.Msg.TAG_MATH_NUMCHECK = ['math.h', 'two number check'];
Blockly.Msg.TAG_MATH_NUMCOMPARE = ['math.h', 'two number compare'];
Blockly.Msg.TAG_MATH_NUMBER = ['number'];
Blockly.Msg.TAG_MATH_ARITHMETIC = ['number', 'arithmetic', 'additionsubtractionmultiplicationdivision', '+-*/'];
Blockly.Msg.TAG_MATH_MODULO = ['arithmetic', 'remainder', '%'];

Blockly.Msg.TAG_TIME_CURRENT = ['time.h', 'get current time', 'print current time'];
Blockly.Msg.TAG_TIME_REQUIREDTIME = ['time.h', 'the time to do followings'];